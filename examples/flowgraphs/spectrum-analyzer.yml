---
protocolVersion: 1.0.0
cyberetherVersion: 1.0.0
title: Spectrum Analyzer
summary: Simple waterfall and lineplot.
author: Luigi
license: MIT
description: 'Shows how a CyberEther flowgraph can be used as a traditional SDR console. This example will take the samples from the SDR and display a frequency-domain representation of it.'
graph:
  win:
    module: window
    device: cpu
    dataType: CF32
    config:
      size: 2048
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 300
      nodePos: [0, 0]
      controlEnabled: false
  soapy:
    module: soapy
    device: cpu
    dataType: CF32
    config:
      bufferMultiplier: 512
      sampleRate: 2000000
      frequency: 94900000
      hintString: ''
      streamString: ''
      numberOfTimeSamples: 2048
      numberOfBatches: 8
      automaticGain: true
      deviceString: 'driver=rtlsdr,serial=00000001'
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 300
      nodePos: [0, 138.67212]
      controlEnabled: false
  inv18:
    module: invert
    device: cpu
    dataType: CF32
    input:
      buffer: ${graph.win.output.window}
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 140
      nodePos: [346.7826, 22]
      controlEnabled: false
  win_mul:
    module: multiply
    device: cpu
    dataType: CF32
    input:
      factorB: ${graph.inv18.output.buffer}
      factorA: ${graph.soapy.output.buffer}
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 167
      nodePos: [557.7826, 40.67212]
      controlEnabled: false
  fft:
    module: fft
    device: cpu
    inputDataType: CF32
    outputDataType: CF32
    config:
      forward: true
    input:
      buffer: ${graph.win_mul.output.product}
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 300
      nodePos: [767.0652, 32]
      controlEnabled: false
  amp:
    module: amplitude
    device: cpu
    inputDataType: CF32
    outputDataType: F32
    input:
      buffer: ${graph.fft.output.buffer}
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 147
      nodePos: [1107.8478, 41]
      controlEnabled: false
  scl:
    module: scale
    device: cpu
    dataType: F32
    config:
      range: [-100, 0]
    input:
      buffer: ${graph.amp.output.buffer}
    interface:
      previewEnabled: false
      viewEnabled: false
      nodeWidth: 300
      nodePos: [1298.1304, 0]
      controlEnabled: false
  wtf:
    module: waterfall
    device: cpu
    dataType: F32
    config:
      viewSize: [512, 384]
      interpolate: true
      height: 512
      offset: 0
      zoom: 1
    input:
      buffer: ${graph.scl.output.buffer}
    interface:
      previewEnabled: true
      viewEnabled: false
      nodeWidth: 300
      nodePos: [1654.6304, 350]
      controlEnabled: false
  spc:
    module: spectrogram
    device: cpu
    dataType: F32
    config:
      viewSize: [512, 384]
      height: 256
    input:
      buffer: ${graph.scl.output.buffer}
    interface:
      previewEnabled: true
      viewEnabled: false
      nodeWidth: 300
      nodePos: [1654.6652, -3.3278809]
      controlEnabled: false
  spe18:
    module: spectroscope
    device: cpu
    inputDataType: CF32
    outputDataType: F32
    config:
      viewSize: [512, 512]
      range: [-88, 1]
      waterfall: true
      lineplot: true
      spectrogram: false
    input:
      buffer: ${graph.soapy.output.buffer}
    interface:
      previewEnabled: true
      viewEnabled: false
      nodeWidth: 300
      nodePos: [550.8816, 224.20804]
      controlEnabled: false
  not28:
    module: note
    device: cpu
    config:
      note: 'The `Spectroscope` blocks is a higher level way to visualize the signal. It basically implements all modules you see above with multiple options to visualize it.'
    interface:
      previewEnabled: true
      viewEnabled: false
      nodeWidth: 368.99426
      nodePos: [875.8815, 381.208]
      controlEnabled: false
